[{"/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/index.js":"1","/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/App.js":"2","/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/PomControl.js":"3","/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/Timer.js":"4","/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/TimerDisplay.js":"5","/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/TimerControl.js":"6"},{"size":175,"mtime":1609612809282,"results":"7","hashOfConfig":"8"},{"size":2338,"mtime":1611428495425,"results":"9","hashOfConfig":"8"},{"size":848,"mtime":1616365014635,"results":"10","hashOfConfig":"8"},{"size":1309,"mtime":1611338880725,"results":"11","hashOfConfig":"8"},{"size":332,"mtime":1609823801545,"results":"12","hashOfConfig":"8"},{"size":1598,"mtime":1616364993956,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1sf4u43",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"16"},"/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/index.js",[],["32","33"],"/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/App.js",["34","35","36"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {useEffect, useState, useLayoutEffect} from 'react'; \n\nimport PomControl from './PomControl'; \nimport Timer from './Timer'; \n\nconst App = () => {\n\n    const [pomSetting, setPomSetting] = useState('pomodoro'); \n    const [timeLeft, setTimeLeft] = useState(1500); \n    const [initialTime, setInitialTime] = useState(1500); \n    const [currentStatus, setCurrentStatus] = useState('stopped');\n\n    // Runs when the pomSetting is updated in PomControl \n    // if the pomSetting is changed, the timeLeft must also update\n    useEffect(() => {\n\n        if (pomSetting === 'pomodoro') {\n            setTimeLeft(1500);\n            setInitialTime(1500); \n            setCurrentStatus('stopped');\n        }\n        else if (pomSetting === 'short') {\n            setTimeLeft(300);\n            setInitialTime(300); \n            setCurrentStatus('stopped');\n        }\n        else if (pomSetting === 'long') {\n            setTimeLeft(900);\n            setInitialTime(900); \n            setCurrentStatus('stopped');\n        }\n\n    }, [pomSetting]);\n\n    // Maintains interval \n    useEffect(() => {\n\n        let interval = null; \n\n        if (currentStatus === 'active' && timeLeft > 0) {\n            interval = setInterval(() => {\n                setTimeLeft(timeLeft - 1);\n            }, 1000); \n        } else {\n            clearInterval(interval); \n        }\n        return () => clearInterval(interval); \n\n    }, [currentStatus, timeLeft, pomSetting]);\n\n    // Alert pop up when timeLeft reaches 0 \n    /* Currently, the way alert works in the browser makes this pop up \n    // before this element re-renders, pausing the browser, and upon\n    // closing the alert, it goes away\n    // Making this an actual sound alert is a WIP :)\n    */ \n    useEffect(() => {\n        if (timeLeft == 0) {\n            alert(\"Time's up! :)\"); \n        }\n    }, [timeLeft]);\n    \n    return (\n        <section className=\"App\">\n        <PomControl\n            changePomSetting={[pomSetting, setPomSetting]}\n        />\n        <Timer \n            initialTime={initialTime} \n            changeTimeLeft={[timeLeft, setTimeLeft]}\n            pomSetting={[pomSetting, setPomSetting]}\n            currentStatus={[currentStatus, setCurrentStatus]}\n        />\n    </section>\n    );\n} \n\nexport default App;\n","/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/PomControl.js",["37","38","39"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; \n\nconst PomControl = (props) => {\n\n    const [pomSetting, setPomSetting] = props.changePomSetting; \n\n    return (\n        <section className=\"pomControl\">\n            <button \n                onClick={() => setPomSetting('pomodoro')} \n                className=\"controlButton\"\n            >\n                Pomodoro\n            </button>\n            <button \n                onClick={() => setPomSetting('short')}\n                className=\"controlButton\"\n            >\n                Short Break\n            </button>\n            <button \n                onClick={() => setPomSetting('long')}\n                className=\"controlButton\"\n            >\n                Long Break\n            </button>\n        </section>\n    );\n    \n\n}\n\nexport default PomControl; ","/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/Timer.js",["40","41","42","43","44"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {useState, useEffect} from 'react';\nimport TimerDisplay from './TimerDisplay'; \nimport TimerControl from './TimerControl'; \n\nconst Timer = (props) => {\n\n    const [timeLeft, setTimeLeft] = props.changeTimeLeft; \n    const [pomSetting, setPomSetting] = props.pomSetting;  \n    const [currentStatus, setCurrentStatus] = props.currentStatus; \n    const initialTime = props.initialTime; \n\n    // currentTime state is in seconds, this formats it to MM:SS using regex\n    function calculateTimeLeft() {\n        let minsLeft = Math.floor(timeLeft / 60) + ''; \n        let secondsLeft = Math.floor(timeLeft % 60) + ''; \n\n        // Assures seconds displays two digit formatting\n        if (secondsLeft.length < 10) {\n            secondsLeft = secondsLeft.padStart(2, '0'); \n        }\n\n        return `${minsLeft}:${secondsLeft}`; \n    }\n\n    return(\n        <section className=\"timer\">\n\n            <TimerDisplay\n                calculateTimeLeft={calculateTimeLeft}\n            /> \n\n            <TimerControl \n                changeCurrentStatus={[currentStatus, setCurrentStatus]}\n                timeLeft={[timeLeft, setTimeLeft]}\n                initialTime={initialTime}\n            />\n\n        </section>\n\n    );\n    \n}\n\nexport default Timer; ","/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/TimerDisplay.js",["45","46","47"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {useState, useEffect} from 'react'; \n\n\nconst TimerDisplay = (props) => {\n\n    const calculateTimeLeft = props.calculateTimeLeft; \n\n    return (\n        <div id=\"timerDisplay\">\n            {calculateTimeLeft()}\n        </div>\n    );\n}\n\nexport default TimerDisplay; ","/Users/jenmann/Documents/Dev/react_projects/pomtimer/src/TimerControl.js",["48","49"],"import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst TimerControl = (props) => {\n\n    const [currentStatus, setCurrentStatus] = props.changeCurrentStatus; \n    const [timeLeft, setTimeLeft] = props.timeLeft; \n\n    // Used to control currentStatus state and button text\n    function toggleStatus() {\n\n        const btn = document.querySelector('#toggleActiveBtn');\n\n        if (currentStatus === 'stopped') {\n            setCurrentStatus('active');         \n            btn.innerHTML = \"Stop\"; \n            \n        }\n        else { // if currentStatus === 'active' \n            setCurrentStatus('stopped'); \n            btn.innerHTML = \"Start\"; \n        }\n\n    }\n\n    // Controls the color of the start button \n    useEffect(() => {\n\n        const btn = document.querySelector('#toggleActiveBtn');\n\n        btn.classList.toggle(\"btnStart\")\n        btn.classList.toggle(\"btnStop\")\n        \n    }, [currentStatus]); \n\n    // Reset button functionality\n    function clickReset() {\n        setTimeLeft(props.initialTime); \n        setCurrentStatus('stopped');\n    }\n    \n    return(\n        <div id=\"timerControls\">\n            <button \n                onClick={toggleStatus}              \n                id=\"toggleActiveBtn\"\n                className=\"btnStop\">\n                {currentStatus === 'active' ? 'Stop' : 'Start'}    \n            </button>\n            \n            <button \n                onClick={clickReset}\n                id=\"resetBtn\"\n            >\n                Reset\n            </button>\n        </div>\n    );\n    \n}\n\nexport default TimerControl; ",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":16},{"ruleId":"54","severity":1,"message":"58","line":3,"column":30,"nodeType":"56","messageId":"57","endLine":3,"endColumn":45},{"ruleId":"59","severity":1,"message":"60","line":60,"column":22,"nodeType":"61","messageId":"62","endLine":60,"endColumn":24},{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":16},{"ruleId":"54","severity":1,"message":"63","line":3,"column":8,"nodeType":"56","messageId":"57","endLine":3,"endColumn":11},{"ruleId":"54","severity":1,"message":"64","line":7,"column":12,"nodeType":"56","messageId":"57","endLine":7,"endColumn":22},{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":16},{"ruleId":"54","severity":1,"message":"65","line":3,"column":9,"nodeType":"56","messageId":"57","endLine":3,"endColumn":17},{"ruleId":"54","severity":1,"message":"66","line":3,"column":19,"nodeType":"56","messageId":"57","endLine":3,"endColumn":28},{"ruleId":"54","severity":1,"message":"64","line":10,"column":12,"nodeType":"56","messageId":"57","endLine":10,"endColumn":22},{"ruleId":"54","severity":1,"message":"67","line":10,"column":24,"nodeType":"56","messageId":"57","endLine":10,"endColumn":37},{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":16},{"ruleId":"54","severity":1,"message":"65","line":3,"column":9,"nodeType":"56","messageId":"57","endLine":3,"endColumn":17},{"ruleId":"54","severity":1,"message":"66","line":3,"column":19,"nodeType":"56","messageId":"57","endLine":3,"endColumn":28},{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":16},{"ruleId":"54","severity":1,"message":"68","line":7,"column":12,"nodeType":"56","messageId":"57","endLine":7,"endColumn":20},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'useLayoutEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'App' is defined but never used.","'pomSetting' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'setPomSetting' is assigned a value but never used.","'timeLeft' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]