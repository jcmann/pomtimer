{"version":3,"sources":["PomControl.js","TimerDisplay.js","TimerControl.js","Timer.js","App.js","index.js"],"names":["PomControl","props","changePomSetting","setPomSetting","className","onClick","TimerDisplay","calculateTimeLeft","id","TimerControl","changeCurrentStatus","currentStatus","setCurrentStatus","timeLeft","setTimeLeft","useEffect","btn","document","querySelector","classList","toggle","innerHTML","initialTime","Timer","changeTimeLeft","pomSetting","minsLeft","Math","floor","secondsLeft","length","padStart","App","useState","setInitialTime","interval","setInterval","clearInterval","alert","ReactDOM","render","getElementById"],"mappings":"kLAkCeA,EA9BI,SAACC,GAAW,IAAD,cAEUA,EAAMC,iBAFhB,GAEPC,GAFO,WAI1B,OACI,0BAASC,UAAU,aAAnB,UACI,wBACIC,QAAS,kBAAMF,EAAc,aAC7BC,UAAU,gBAFd,sBAMA,wBACIC,QAAS,kBAAMF,EAAc,UAC7BC,UAAU,gBAFd,yBAMA,wBACIC,QAAS,kBAAMF,EAAc,SAC7BC,UAAU,gBAFd,4BCNGE,EAXM,SAACL,GAElB,IAAMM,EAAoBN,EAAMM,kBAEhC,OACI,qBAAKC,GAAG,eAAR,SACKD,OCkDEE,EA1DM,SAACR,GAAW,IAAD,cAEcA,EAAMS,oBAFpB,GAErBC,EAFqB,KAENC,EAFM,mBAGIX,EAAMY,SAHV,GAGXC,GAHW,WAsC5B,OAfAC,qBAAU,WAEN,IAAMC,EAAMC,SAASC,cAAc,oBAEnCF,EAAIG,UAAUC,OAAO,YACrBJ,EAAIG,UAAUC,OAAO,aAEtB,CAACT,IASA,sBAAKH,GAAG,gBAAR,UACI,wBACIH,QAnCZ,WAEI,IAAMW,EAAMC,SAASC,cAAc,oBAEb,YAAlBP,GACAC,EAAiB,UACjBI,EAAIK,UAAY,SAIhBT,EAAiB,WACjBI,EAAIK,UAAY,UAyBZb,GAAG,kBACHJ,UAAU,UAHd,SAIuB,WAAlBO,EAA6B,OAAS,UAG3C,wBACIN,QAfZ,WACIS,EAAYb,EAAMqB,aAClBV,EAAiB,YAcTJ,GAAG,WAFP,uBCLGe,EAvCD,SAACtB,GAAW,IAAD,cAEWA,EAAMuB,eAFjB,GAEdX,EAFc,KAEJC,EAFI,mBAGeb,EAAMwB,WAHrB,4BAIqBxB,EAAMU,cAJ3B,IAIdA,EAJc,KAICC,EAJD,KAKfU,EAAcrB,EAAMqB,YAe1B,OACI,0BAASlB,UAAU,QAAnB,UAEI,cAAC,EAAD,CACIG,kBAhBZ,WACI,IAAImB,EAAWC,KAAKC,MAAMf,EAAW,IAAM,GACvCgB,EAAcF,KAAKC,MAAMf,EAAW,IAAM,GAO9C,OAJIgB,EAAYC,OAAS,KACrBD,EAAcA,EAAYE,SAAS,EAAG,MAGpC,GAAN,OAAUL,EAAV,YAAsBG,MAUlB,cAAC,EAAD,CACInB,oBAAqB,CAACC,EAAeC,GACrCC,SAAU,CAACA,EAAUC,GACrBQ,YAAaA,QC2CdU,EAxEH,WAAO,IAAD,EAEsBC,mBAAS,YAF/B,mBAEPR,EAFO,KAEKtB,EAFL,OAGkB8B,mBAAS,MAH3B,mBAGPpB,EAHO,KAGGC,EAHH,OAIwBmB,mBAAS,MAJjC,mBAIPX,EAJO,KAIMY,EAJN,OAK4BD,mBAAS,WALrC,mBAKPtB,EALO,KAKQC,EALR,KAyDd,OAhDAG,qBAAU,WAEa,aAAfU,GACAX,EAAY,MACZoB,EAAe,MACftB,EAAiB,YAEG,UAAfa,GACLX,EAAY,KACZoB,EAAe,KACftB,EAAiB,YAEG,SAAfa,IACLX,EAAY,KACZoB,EAAe,KACftB,EAAiB,cAGtB,CAACa,IAGJV,qBAAU,WAEN,IAAIoB,EAAW,KASf,MAPsB,WAAlBxB,GAA8BE,EAAW,EACzCsB,EAAWC,aAAY,WACnBtB,EAAYD,EAAW,KACxB,KAEHwB,cAAcF,GAEX,kBAAME,cAAcF,MAE5B,CAACxB,EAAeE,EAAUY,IAQ7BV,qBAAU,WACU,GAAZF,GACAyB,MAAM,mBAEX,CAACzB,IAGA,0BAAST,UAAU,MAAnB,UACA,cAAC,EAAD,CACIF,iBAAkB,CAACuB,EAAYtB,KAEnC,cAAC,EAAD,CACImB,YAAaA,EACbE,eAAgB,CAACX,EAAUC,GAC3BW,WAAY,CAACA,EAAYtB,GACzBQ,cAAe,CAACA,EAAeC,SCpE3C2B,IAASC,OACP,cAAC,EAAD,IACAvB,SAASwB,eAAe,W","file":"static/js/main.13a17334.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; \n\nconst PomControl = (props) => {\n\n    const [pomSetting, setPomSetting] = props.changePomSetting; \n\n    return (\n        <section className=\"pomControl\">\n            <button \n                onClick={() => setPomSetting('pomodoro')} \n                className=\"controlButton\"\n            >\n                Pomodoro\n            </button>\n            <button \n                onClick={() => setPomSetting('short')}\n                className=\"controlButton\"\n            >\n                Short Break\n            </button>\n            <button \n                onClick={() => setPomSetting('long')}\n                className=\"controlButton\"\n            >\n                Long Break\n            </button>\n        </section>\n    );\n    \n\n}\n\nexport default PomControl; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {useState, useEffect} from 'react'; \n\n\nconst TimerDisplay = (props) => {\n\n    const calculateTimeLeft = props.calculateTimeLeft; \n\n    return (\n        <div id=\"timerDisplay\">\n            {calculateTimeLeft()}\n        </div>\n    );\n}\n\nexport default TimerDisplay; ","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst TimerControl = (props) => {\n\n    const [currentStatus, setCurrentStatus] = props.changeCurrentStatus; \n    const [timeLeft, setTimeLeft] = props.timeLeft; \n\n    // Used to control currentStatus state and button text\n    function toggleStatus() {\n\n        const btn = document.querySelector('#toggleActiveBtn');\n\n        if (currentStatus === 'stopped') {\n            setCurrentStatus('active');         \n            btn.innerHTML = \"Stop\"; \n            \n        }\n        else { // if currentStatus === 'active' \n            setCurrentStatus('stopped'); \n            btn.innerHTML = \"Start\"; \n        }\n\n    }\n\n    // Controls the color of the start button \n    useEffect(() => {\n\n        const btn = document.querySelector('#toggleActiveBtn');\n\n        btn.classList.toggle(\"btnStart\")\n        btn.classList.toggle(\"btnStop\")\n        \n    }, [currentStatus]); \n\n    // Reset button functionality\n    function clickReset() {\n        setTimeLeft(props.initialTime); \n        setCurrentStatus('stopped');\n    }\n    \n    return(\n        <div id=\"timerControls\">\n            <button \n                onClick={toggleStatus}              \n                id=\"toggleActiveBtn\"\n                className=\"btnStop\">\n                {currentStatus === 'active' ? 'Stop' : 'Start'}    \n            </button>\n            \n            <button \n                onClick={clickReset}\n                id=\"resetBtn\"\n            >\n                Reset\n            </button>\n        </div>\n    );\n    \n}\n\nexport default TimerControl; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {useState, useEffect} from 'react';\nimport TimerDisplay from './TimerDisplay'; \nimport TimerControl from './TimerControl'; \n\nconst Timer = (props) => {\n\n    const [timeLeft, setTimeLeft] = props.changeTimeLeft; \n    const [pomSetting, setPomSetting] = props.pomSetting;  \n    const [currentStatus, setCurrentStatus] = props.currentStatus; \n    const initialTime = props.initialTime; \n\n    // currentTime state is in seconds, this formats it to MM:SS using regex\n    function calculateTimeLeft() {\n        let minsLeft = Math.floor(timeLeft / 60) + ''; \n        let secondsLeft = Math.floor(timeLeft % 60) + ''; \n\n        // Assures seconds displays two digit formatting\n        if (secondsLeft.length < 10) {\n            secondsLeft = secondsLeft.padStart(2, '0'); \n        }\n\n        return `${minsLeft}:${secondsLeft}`; \n    }\n\n    return(\n        <section className=\"timer\">\n\n            <TimerDisplay\n                calculateTimeLeft={calculateTimeLeft}\n            /> \n\n            <TimerControl \n                changeCurrentStatus={[currentStatus, setCurrentStatus]}\n                timeLeft={[timeLeft, setTimeLeft]}\n                initialTime={initialTime}\n            />\n\n        </section>\n\n    );\n    \n}\n\nexport default Timer; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {useEffect, useState, useLayoutEffect} from 'react'; \n\nimport PomControl from './PomControl'; \nimport Timer from './Timer'; \n\nconst App = () => {\n\n    const [pomSetting, setPomSetting] = useState('pomodoro'); \n    const [timeLeft, setTimeLeft] = useState(1500); \n    const [initialTime, setInitialTime] = useState(1500); \n    const [currentStatus, setCurrentStatus] = useState('stopped');\n\n    // Runs when the pomSetting is updated in PomControl \n    // if the pomSetting is changed, the timeLeft must also update\n    useEffect(() => {\n\n        if (pomSetting === 'pomodoro') {\n            setTimeLeft(1500);\n            setInitialTime(1500); \n            setCurrentStatus('stopped');\n        }\n        else if (pomSetting === 'short') {\n            setTimeLeft(300);\n            setInitialTime(300); \n            setCurrentStatus('stopped');\n        }\n        else if (pomSetting === 'long') {\n            setTimeLeft(900);\n            setInitialTime(900); \n            setCurrentStatus('stopped');\n        }\n\n    }, [pomSetting]);\n\n    // Maintains interval \n    useEffect(() => {\n\n        let interval = null; \n\n        if (currentStatus === 'active' && timeLeft > 0) {\n            interval = setInterval(() => {\n                setTimeLeft(timeLeft - 1);\n            }, 1000); \n        } else {\n            clearInterval(interval); \n        }\n        return () => clearInterval(interval); \n\n    }, [currentStatus, timeLeft, pomSetting]);\n\n    // Alert pop up when timeLeft reaches 0 \n    /* Currently, the way alert works in the browser makes this pop up \n    // before this element re-renders, pausing the browser, and upon\n    // closing the alert, it goes away\n    // Making this an actual sound alert is a WIP :)\n    */ \n    useEffect(() => {\n        if (timeLeft == 0) {\n            alert(\"Time's up! :)\"); \n        }\n    }, [timeLeft]);\n    \n    return (\n        <section className=\"App\">\n        <PomControl\n            changePomSetting={[pomSetting, setPomSetting]}\n        />\n        <Timer \n            initialTime={initialTime} \n            changeTimeLeft={[timeLeft, setTimeLeft]}\n            pomSetting={[pomSetting, setPomSetting]}\n            currentStatus={[currentStatus, setCurrentStatus]}\n        />\n    </section>\n    );\n} \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}